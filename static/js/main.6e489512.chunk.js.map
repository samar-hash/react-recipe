{"version":3,"sources":["Recipe/Recipe.js","App.js","serviceWorker.js","index.js","Recipe/recipe.module.css"],"names":["Recipe","props","react_default","a","createElement","className","style","recipe","title","src","image","alt","ingredients","map","ingredient","text","calories","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecpies","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecpies","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","console","log","stop","apply","this","arguments","onSubmit","event","preventDefault","value","width","onChange","target","type","x","src_Recipe_Recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"kPAiBeA,EAfF,SAACC,GAAD,OACVC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMC,QACxBL,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,OACXN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,MAAOC,IAAI,GAAGN,UAAWC,IAAMI,QAE/CR,EAAAC,EAAAC,cAAA,UACGH,EAAMW,YAAYC,IAAI,SAAAC,GAAU,OAChCZ,EAAAC,EAAAC,cAAA,UAAMU,EAAWC,SAGpBb,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6BAA6BH,EAAMe,YCkDxBC,MA3Df,WACE,IADaC,EAGcC,mBAAS,IAHvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGNK,EAHMH,EAAA,GAGEI,EAHFJ,EAAA,GAAAK,EAIYN,mBAAS,IAJrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAINE,EAJMD,EAAA,GAICE,EAJDF,EAAA,GAAAG,EAKUV,mBAAS,WALnBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAKNE,EALMD,EAAA,GAKAE,EALAF,EAAA,GAOZG,oBAAU,WACVC,KACA,CAACH,IAGF,IAAMG,EAAU,eAAAC,EAAAd,OAAAe,EAAA,EAAAf,CAAAgB,EAAAlC,EAAAmC,KAAE,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAlC,EAAAuC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACKC,MAAK,mCAAAC,OAAoChB,EAApC,YAAAgB,OAZhB,WAYgB,aAAAA,OAXf,qCAUK,cACVP,EADUG,EAAAK,KAAAL,EAAAE,KAAA,EAEEL,EAASS,OAFX,OAEVR,EAFUE,EAAAK,KAGfxB,EAAWiB,EAAKS,MAChBC,QAAQC,IAAIX,EAAKS,MAJF,wBAAAP,EAAAU,SAAAd,MAAF,yBAAAJ,EAAAmB,MAAAC,KAAAC,YAAA,GAkBhB,OAEEtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZH,EAAAC,EAAAC,cAAA,QAAMqD,SATM,SAACC,GACfA,EAAMC,iBACN3B,EAASL,GACTC,EAAU,KAMoBvB,UAAU,eACrCH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kBACVuD,MAAOjC,EACPrB,MAAO,CAACuD,MAAM,OACdC,SAlBO,SAACJ,GACjB9B,EAAU8B,EAAMK,OAAOH,UAmBpB1D,EAAAC,EAAAC,cAAA,UAAQ4D,KAAK,SAAS3D,UAAU,gBAAhC,WAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdkB,EAAQV,IAAI,SAAAoD,GAAC,OACZ/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAC8D,EAAD,CACAC,IAAKF,EAAE1D,OAAOC,MACdA,MAAOyD,EAAE1D,OAAO6D,MAChBpD,SAAUiD,EAAE1D,OAAOS,SACnBN,MAAOuD,EAAE1D,OAAOG,MAChBE,YAAaqD,EAAE1D,OAAOK,oBCxCXyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPzE,EAAAC,EAAAC,cAACF,EAAAC,EAAMyE,WAAP,KACE1E,EAAAC,EAAAC,cAACyE,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,8BExI5BC,EAAAC,QAAA,CAAkBnF,OAAA,uBAAAG,MAAA","file":"static/js/main.6e489512.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css'\r\nconst Recipe=(props)=>(\r\n   <div className={style.recipe} >\r\n <h1>{props.title}</h1>\r\n <img src={props.image} alt=\"\" className={style.image}/>\r\n\r\n <ol>\r\n   {props.ingredients.map(ingredient=>(\r\n    <li >{ingredient.text}</li>\r\n   ))}\r\n </ol>\r\n <p><strong> Calorios: </strong>{props.calories}</p>\r\n\r\n </div>\r\n  );\r\n\r\nexport default Recipe;","import React, { useState,useEffect } from 'react';\nimport './App.css';\nimport Recipe from './Recipe/Recipe';\nfunction App() {\n  const appID=\"432eede9\";\n  const appKey=\"24d56865ad9fec2c2745a2b0e8bbf291\";\n  const [recipes,setRecpies]=useState([]);\n  const [search,setSearch]=useState(\"\");\n  const [query,setQuery]=useState('chicken');\n\n   useEffect(()=>{\n   getRecpies(); \n },[query]);\n\n\n  const getRecpies= async () => {\n    const response=await fetch(`https://api.edamam.com/search?q=${query}&app_id=${appID}&app_key=${appKey}`);\n    const data= await response.json();\n     setRecpies(data.hits);\n     console.log(data.hits);\n  };\n   \n   const updateSearch=(event)=>{\n      setSearch(event.target.value);\n\n   };\n\n   const getSearch=(event)=>{\n     event.preventDefault();\n     setQuery(search); \n     setSearch('');\n   };\n\n  return (\n    \n    <div className=\"App\">\n       <form onSubmit={getSearch } className=\"form-inline\" >\n        <input className=\"form-control xx\"\n               value={search}\n               style={{width:\"50%\"}}\n               onChange={updateSearch}\n        />\n         <button type=\"submit\" className=\"btn btn-dark\">Search</button>\n       </form>\n       <div className=\"row reci\">\n       {recipes.map(x=>(\n         <div className=\"col-sm-6\">\n         <Recipe\n         key={x.recipe.title}\n         title={x.recipe.label}\n         calories={x.recipe.calories}\n         image={x.recipe.image}\n         ingredients={x.recipe.ingredients} \n        />\n        </div>\n  ))\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3celo\",\"image\":\"recipe_image__1Voxs\"};"],"sourceRoot":""}